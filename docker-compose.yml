version: '3'

volumes:
  streamsets-dc-storage: {}
  grafana-storage: {}
  influxdb-storage: {}

services:
  #https://github.com/jkehres/docker-compose-influxdb-grafana/blob/master/docker-compose.yml
  influxdb:
    image: influxdb:latest
    container_name: influxdb
    ports:
        - '8086:8086'
    volumes:
        - influxdb-storage:/var/lib/influxdb
        - ./influxdb/config/:/etc/influxdb/ #https://gist.github.com/owainlewis/885f5a6a2cbd12d225c4023c6793cd5d
    environment:
        - INFLUXDB_DB=${INFLUXDB_DB}
        - INFLUXDB_ADMIN_USER=${INFLUXDB_USERNAME}
        - INFLUXDB_ADMIN_PASSWORD=${INFLUXDB_PASSWORD}
  
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - '3000:3000'
    volumes:
      - grafana-storage:/var/lib/grafana
      - ./grafana/provisioning/:/etc/grafana/provisioning
    depends_on:
      - influxdb
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USERNAME}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}

  #https://github.com/streamsets/datacollector-docker
  streamsets-dc:
    build: ./streamsets
    container_name: streamsets-dc
    ports:
      - "18630:18630"
    restart: on-failure
    volumes:
      - streamsets-dc-storage:/data

  #https://github.com/confluentinc/cp-all-in-one/blob/5.5.1-post/cp-all-in-one-community/docker-compose.yml
  zookeeper:
    image: confluentinc/cp-zookeeper:5.5.1
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
  
  kafka:
    image: confluentinc/cp-kafka:5.5.1
    hostname: kafka
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "29092:29092"
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_JMX_PORT: 9101

  ksqldb-server:
    image: confluentinc/cp-ksqldb-server:5.5.1
    hostname: ksqldb-server
    container_name: ksqldb-server
    depends_on:
      - kafka
    ports:
      - "8088:8088"
    environment:
      KSQL_CONFIG_DIR: "/etc/ksql"
      KSQL_BOOTSTRAP_SERVERS: "kafka:29092"
      KSQL_HOST_NAME: ksqldb-server
      KSQL_LISTENERS: "http://0.0.0.0:8088"
      KSQL_CACHE_MAX_BYTES_BUFFERING: 0
      KSQL_PRODUCER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor"
      KSQL_CONSUMER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor"

  ksqldb-cli:
    image: confluentinc/cp-ksqldb-cli:5.5.1
    container_name: ksqldb-cli
    depends_on:
      - kafka
      - ksqldb-server
    entrypoint: /bin/sh
    tty: true
    
  postgres:
    image: postgres
    container_name: postgres
    restart: always
    ports:
      - "5432:5432"
    volumes:
      - ./combatsimulation.sql:/docker-entrypoint-initdb.d/1-combatsimulation.sql
      - ./combatsimulation-inserts.sql:/docker-entrypoint-initdb.d/2-combatsimulation-inserts.sql
    environment:
      POSTGRES_USER: "testuser"
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: "combatsimulation"

  combat-sim:
    build: ./CombatSimGradle
    container_name: combat-sim
    restart: on-failure
    depends_on:
      - postgres
      - kafka